name: Mars CD for PyPI

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        node-version: ["14.x"]
        include:
          - { os: ubuntu-latest, python-version: "3.7", python-abis: "cp37-cp37m" }
          - { os: ubuntu-latest, python-version: "3.8", python-abis: "cp38-cp38" }
          - { os: ubuntu-latest, python-version: "3.9", python-abis: "cp39-cp39" }
          - { os: ubuntu-latest, python-version: "3.10", python-abis: "cp310-cp310" }
          - { os: windows-latest, python-version: "3.10", build-static: 1 }

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Set up conda ${{ matrix.python-version }}
        env:
          PYTHON: ${{ matrix.python-version }}
        shell: bash
        run: |
          source ./ci/install-conda.sh
          python -m pip install --upgrade pip setuptools wheel coverage;

      - name: Install dependencies
        env:
          WITH_HADOOP: ${{ matrix.with-hadoop }}
          WITH_KUBERNETES: ${{ matrix.with-kubernetes }}
          NO_COMMON_TESTS: ${{ matrix.no-common-tests }}
        shell: bash
        run: |
          source ./ci/reload-env.sh
          export DEFAULT_VENV=$VIRTUAL_ENV

          if [[ "$PYTHON" =~ "3.9" ]]; then
            conda install -n test --quiet --yes -c conda-forge python=$PYTHON pyarrow
          fi

          pip install numpy scipy cython
          pip install -e ".[dev,extra]"
          conda list -n test

      - name: Deploy packages
        if: startsWith(github.ref, 'refs/tags/') && matrix.no-deploy != '1'
        shell: bash
        env:
          PYABI: ${{ matrix.python-abis }}
          BUILD_STATIC: ${{ matrix.build-static }}
          PYPI_PWD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          source ./ci/reload-env.sh
          if [[ "$PYTHON" =~ "3.10" ]]; then
            export DOCKER_IMAGE="quay.io/pypa/manylinux2014_x86_64"
          else
            export DOCKER_IMAGE="quay.io/pypa/manylinux1_x86_64"
          fi
          source ./.github/workflows/upload-packages.sh
          
  build-aarch64:
    name: "Build and test ${{ matrix.pyver }} aarch64 wheel"
    strategy:
      matrix:
        python-version: [cp37-cp37m, cp38-cp38, cp39-cp39, cp310-cp310]
        node-version: ["14.x"]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      py: /opt/python/${{ matrix.python-version }}/bin/python
      img: quay.io/pypa/manylinux2014_aarch64
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    - name: Set up conda ${{ matrix.python-version }}
      env:
        PYTHON: ${{ matrix.python-version }}
      shell: bash
      run: |
        source ./ci/install-conda.sh        
    - name: Build Wheel
      run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            ${{ env.img }} \
            bash -exc '${{ env.py }} -m venv .env && \
            source .env/bin/activate && \ 
            source ./ci/reload-env.sh && \
            conda install -n test --quiet --yes -c conda-forge python=$PYTHON pyarrow && \
            pip install numpy scipy cython && \
            pip install -e ".[dev,extra]" && \
            conda list -n test && \
            deactivate'
